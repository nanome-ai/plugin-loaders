import nanome
from nanome.util import Logs

import os
import tempfile
import traceback
import subprocess
from sys import platform

class PPTConverter(object):
    def __init__(self):
        self._tmp_dir = None
        self._running = False
        self._images_nb = 0
        self._base_name = ""

    def Convert(self, file_name, done_delegate, error_delegate = None):
        self._ppt_file = file_name
        name = self._ppt_file
        self._base_name = tempfile.NamedTemporaryFile().name
        if platform == "win32" and (name.endswith(".pptx") or name.endswith(".ppt") or name.endswith(".odp")):
            self._tmp_dir = tempfile.TemporaryDirectory()
            self._step = 1
        else:
            self._step = 2
        self.done_delegate = done_delegate
        self.error_delegate = error_delegate

        self._start_conversion()

    def __del__(self):
        try:
            os.remove(self._tmp_dir)
        except:
            pass
        if self._base_name != "":
            for i in range(self._images_nb):
                try:
                    os.remove(self._base_name + '-pptreader-' + str(i) + '.jpg')
                except:
                    pass

    ### Conversion Process ###

    def update(self):
        if not self._running:
            return
        if self._check_conversion():
            Logs.debug("Done")
            self._conversion_finished()

    def _start_conversion(self):
        if platform == "linux" or platform == "linux2":
            args = ['convert', '-density', '288', self._ppt_file, self._base_name + '-pptreader-%d.jpg']
        elif platform == "darwin":
            Logs.error("Plugin not compatible with Mac OS yet")
        elif platform == "win32":
            if self._step == 1:
                args = ['simpress.exe', '--headless', '--invisible', '--convert-to', 'pdf', '--outdir', self._tmp_dir.name, self._ppt_file]
            else:
                if self._tmp_dir != None:
                    input = os.path.join(self._tmp_dir.name, '*.pdf')
                else:
                    input = self._ppt_file
                args = ['magick', '-density', '288', input, self._base_name + '-pptreader-%d.jpg']

        Logs.debug("Starting conversion with args:", args)
        try:
            self._process = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        except:
            nanome.util.Logs.error("Couldn't convert:", traceback.format_exc())
            self._running = False
            #ERROR
            self.error_delegate()
        self._running = True

    def _check_conversion(self):
        return self._process.poll() != None
                        
    def _conversion_finished(self):
        if platform == "win32" and self._step == 1:
            self._step = 2
            self._start_conversion()
            return

        self._running = False
        try:
            (results, errors) = self._process.communicate()
            if len(errors) == 0:
                for result in results:
                    for line in result.split('\n'):
                        nanome.util.Logs.debug(line)
            else:
                for line in errors.splitlines():
                    nanome.util.Logs.error(line.decode("utf-8"))

                #ERROR
                self.error_delegate()
                return
        except:
            pass

        images = []
        i = 0
        is_file = True
        while is_file:
            file_name = self._base_name + '-pptreader-' + str(i) + '.jpg'
            is_file = os.path.isfile(file_name)
            if is_file:
                images.append(file_name)
                i += 1

        if i < 0:
            nanome.util.Logs.error("No file generated by conversion")
            #ERROR
            self.error_delegate()
            return

        self._images_nb = i
        self.done_delegate(images)